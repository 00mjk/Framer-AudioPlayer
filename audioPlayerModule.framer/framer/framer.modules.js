require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"audio":[function(require,module,exports){
var scaledScreenFrame,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

document.body.style.cursor = "auto";

exports.AudioPlayer = (function(superClass) {
  extend(AudioPlayer, superClass);

  function AudioPlayer(options) {
    var audioControls;
    if (options == null) {
      options = {};
    }
    this.getTimeLeft = bind(this.getTimeLeft, this);
    if (options.backgroundColor == null) {
      options.backgroundColor = "transparent";
    }
    AudioPlayer.__super__.constructor.call(this, options);
    this.controls = new Layer({
      backgroundColor: "transparent",
      width: 80,
      height: 80,
      superLayer: this
    });
    this.controls.showPlay = function() {
      return this.image = "images/play.png";
    };
    this.controls.showPause = function() {
      return this.image = "images/pause.png";
    };
    this.controls.showPlay();
    this.controls.center();
    this.player = document.createElement("audio");
    this.player.setAttribute("webkit-playsinline", "true");
    this.player.setAttribute("preload", "auto");
    this.player.style.width = "100%";
    this.player.style.height = "100%";
    this.player.on = this.player.addEventListener;
    this.player.off = this.player.removeEventListener;
    this.timeStyle = {
      "font-size": "20px",
      "color": "#000"
    };
    this.on(Events.Click, function() {
      var currentTime, duration;
      currentTime = Math.round(this.player.currentTime);
      duration = Math.round(this.player.duration);
      if (this.player.paused) {
        this.player.play();
        this.controls.showPause();
        if (currentTime === duration) {
          this.player.currentTime = 0;
          return this.player.play();
        }
      } else {
        this.player.pause();
        return this.controls.showPlay();
      }
    });
    audioControls = this.controls;
    this.player.onended = function() {
      return audioControls.showPlay();
    };
    this.player.baseProgressOn = function(layer) {
      return Utils.modulate(this.currentTime, [0, this.duration], [0, layer.width], true);
    };
    this.player.baseVolumeOn = function(layer) {
      return Utils.modulate(this.volume, [0, 1], [0, layer.width], true);
    };
    this.player.formatTime = function() {
      var min, sec;
      sec = Math.floor(this.currentTime);
      min = Math.floor(sec / 60);
      sec = Math.floor(sec % 60);
      sec = sec >= 10 ? sec : '0' + sec;
      return min + ":" + sec;
    };
    this.player.formatTimeLeft = function() {
      var min, sec;
      sec = Math.floor(this.duration) - Math.floor(this.currentTime);
      min = Math.floor(sec / 60);
      sec = Math.floor(sec % 60);
      sec = sec >= 10 ? sec : '0' + sec;
      return min + ":" + sec;
    };
    this.audio = options.audio;
    this._element.appendChild(this.player);
  }

  AudioPlayer.define("audio", {
    get: function() {
      return this.player.src;
    },
    set: function(audio) {
      this.player.src = audio;
      if (this.player.canPlayType("audio/mp3") === "") {
        throw Error("No supported audio file included.");
      }
    }
  });

  AudioPlayer.define("showProgress", {
    get: function() {
      return this._showProgress;
    },
    set: function(showProgress) {
      return this.setProgress(showProgress, false);
    }
  });

  AudioPlayer.define("showVolume", {
    get: function() {
      return this._showVolume;
    },
    set: function(showVolume) {
      return this.setVolume(showVolume, false);
    }
  });

  AudioPlayer.define("showTime", {
    get: function() {
      return this._showTime;
    },
    set: function(showTime) {
      return this.getTime(showTime, false);
    }
  });

  AudioPlayer.define("showTimeLeft", {
    get: function() {
      return this._showTimeLeft;
    },
    set: function(showTimeLeft) {
      return this.getTimeLeft(showTimeLeft, false);
    }
  });

  AudioPlayer.prototype._checkBoolean = function(property) {
    var ref, ref1;
    if (_.isString(property)) {
      if ((ref = property.toLowerCase()) === "1" || ref === "true") {
        property = true;
      } else if ((ref1 = property.toLowerCase()) === "0" || ref1 === "false") {
        property = false;
      } else {
        return;
      }
    }
    if (!_.isBool(property)) {

    }
  };

  AudioPlayer.prototype.getTime = function(showTime) {
    this._checkBoolean(showTime);
    this._showTime = showTime;
    if (showTime === true) {
      this.time = new Layer({
        backgroundColor: "transparent"
      });
      this.time.style = this.timeStyle;
      return this.time.html = "0:00";
    }
  };

  AudioPlayer.prototype.getTimeLeft = function(showTimeLeft) {
    this._checkBoolean(showTimeLeft);
    this._showTimeLeft = showTimeLeft;
    if (showTimeLeft === true) {
      this.timeLeft = new Layer({
        backgroundColor: "transparent"
      });
      this.timeLeft.style = this.timeStyle;
      this.timeLeft.html = "-0:00";
      return this.player.on("loadedmetadata", (function(_this) {
        return function() {
          return _this.timeLeft.html = "-" + _this.player.formatTimeLeft();
        };
      })(this));
    }
  };

  AudioPlayer.prototype.setProgress = function(showProgress) {
    var mousedown, offsetX, progressFill, progressWidth, wasPlaying;
    this._checkBoolean(showProgress);
    this._showProgress = showProgress;
    if (this._showProgress === true) {
      this.progressBar = new Layer({
        width: 200,
        height: 6,
        backgroundColor: "#eee",
        clip: true
      });
      this.progressFill = new Layer({
        width: 0,
        height: this.progressBar.height,
        backgroundColor: "#222",
        superLayer: this.progressBar
      });
      this.progressBar.on("change:height", function() {
        return progressFill.height = this.height;
      });
      this.progressFill.force2d = true;
      mousedown = wasPlaying = false;
      offsetX = null;
      progressFill = this.progressFill;
      progressWidth = this.progressBar.width;
      this.progressBar.on(Events.TouchStart, (function(_this) {
        return function(event) {
          mousedown = true;
          if (!_this.player.paused) {
            return wasPlaying = true;
          }
        };
      })(this));
      Framer.Device.screen.on(Events.TouchMove, (function(_this) {
        return function(event) {
          var eventX, newFrame, progressX;
          newFrame = scaledScreenFrame(Framer.Device.screen);
          eventX = Utils.round(Events.touchEvent(event).clientX - newFrame.x, 1);
          progressWidth = _this.progressBar.width * _this.progressBar.screenScaleX();
          progressX = _this.progressBar.x * _this.progressBar.screenScaleX();
          offsetX = eventX - progressX;
          offsetX = Utils.modulate(offsetX, [0, progressWidth], [0, progressWidth], true);
          if (mousedown === true) {
            _this.player.pause();
            return _this.player.currentTime = _this.player.duration * (offsetX / progressWidth);
          }
        };
      })(this));
      Framer.Device.screen.on(Events.TouchEnd, (function(_this) {
        return function(event) {
          var currentTime, duration;
          if (mousedown === true) {
            _this.player.currentTime = _this.player.duration * (offsetX / progressWidth);
            currentTime = Math.round(_this.player.currentTime);
            duration = Math.round(_this.player.duration);
            if (wasPlaying && currentTime !== duration) {
              _this.player.play();
              _this.controls.showPause();
            }
            if (currentTime === duration) {
              _this.player.pause();
              _this.controls.showPlay();
            }
          }
          return mousedown = false;
        };
      })(this));
      return this.player.ontimeupdate = (function(_this) {
        return function() {
          _this.progressFill.width = _this.player.baseProgressOn(_this.progressBar);
          _this.time.html = _this.player.formatTime();
          return _this.timeLeft.html = "-" + _this.player.formatTimeLeft();
        };
      })(this);
    }
  };

  AudioPlayer.prototype.setVolume = function(showVolume) {
    var getVolume, mousedown;
    this._checkBoolean(showVolume);
    this.player.volume = 0.75;
    this.volumeBar = new Layer({
      width: 200,
      height: 6,
      backgroundColor: "#eee",
      clip: true
    });
    this.volumeBar.y += 24;
    this.volumeFill = new Layer({
      width: this.volumeBar.width * 0.75,
      height: this.volumeBar.height,
      backgroundColor: "#333",
      superLayer: this.volumeBar
    });
    this.volumeFill.force2d = true;
    this.volumeBar.on("change:height", (function(_this) {
      return function() {
        return _this.volumeFill.height = _this.volumeBar.height;
      };
    })(this));
    this.volumeBar.on("change:width", (function(_this) {
      return function() {
        return _this.volumeFill.width = _this.volumeBar.width * 0.75;
      };
    })(this));
    mousedown = false;
    getVolume = null;
    this.volumeBar.on(Events.TouchStart, function(event) {
      return mousedown = true;
    });
    Framer.Device.screen.on(Events.TouchMove, (function(_this) {
      return function(event) {
        var eventX, newFrame, volumeWidth, volumeX;
        newFrame = scaledScreenFrame(Framer.Device.screen);
        eventX = Utils.round(Events.touchEvent(event).clientX - newFrame.x, 1);
        volumeWidth = _this.volumeBar.width * _this.volumeBar.screenScaleX();
        volumeX = _this.volumeBar.x * _this.volumeBar.screenScaleX();
        getVolume = eventX - volumeX;
        getVolume = Utils.modulate(getVolume, [0, volumeWidth], [0, 1], true);
        if (mousedown === true) {
          return _this.player.volume = getVolume;
        }
      };
    })(this));
    Framer.Device.screen.on(Events.TouchEnd, (function(_this) {
      return function(event) {
        if (mousedown === true) {
          _this.player.volume = getVolume;
        }
        return mousedown = false;
      };
    })(this));
    return this.player.onvolumechange = (function(_this) {
      return function() {
        return _this.volumeFill.width = _this.player.baseVolumeOn(_this.volumeBar);
      };
    })(this);
  };

  return AudioPlayer;

})(Layer);

scaledScreenFrame = function(layer) {
  var frame;
  frame = layer.screenFrame;
  frame.width *= layer.screenScaleX();
  frame.height *= layer.screenScaleY();
  frame.x += (layer.width - frame.width) * layer.originX;
  frame.y += (layer.height - frame.height) * layer.originX;
  return frame;
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
